(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~swan_modules/date"],{

/***/ "./node_modules/@onlabsorg/swan-js/lib/modules/date.js":
/*!*************************************************************!*\
  !*** ./node_modules/@onlabsorg/swan-js/lib/modules/date.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n *  date - swan stdlib module\n *  ============================================================================\n *  Contains functions to handle date and time.\n */\nmodule.exports = {\n  /**\n   *  date.\\_\\_apply\\_\\_ - function\n   *  ------------------------------------------------------------------------\n   *  Creates a date given all the date components expressed in the local\n   *  timezone.\n   *  ```\n   *  dt = date(y, m, d, h, min, s, ms)\n   *  ```\n   *  - `y` is the year in the local timezone\n   *  - `m` is the month in the local timezone (1:January, ..., 12:December)\n   *  - `d` is the day in the local timezone\n   *  - `h` is the hour in the local timezone\n   *  - `min` is the minute in the local timezone\n   *  - `s` is the number of seconds\n   *  - `ms` is the number of milliseconds\n   *  - `dt` is the number of milliseconds from the epoch (Jan 1, 1970)\n   */\n  __apply__: function __apply__(y) {\n    var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var d = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var min = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    var ms = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    return Number(new Date(y, m - 1, d, h, min, s, ms));\n  },\n\n  /**\n   *  date.timezone - number\n   *  ------------------------------------------------------------------------\n   *  It contains the current time zone in hours. For example in UTC+1 it\n   *  will hold the value +1.\n   */\n  timezone: -new Date().getTimezoneOffset() / 60,\n\n  /**\n   *  date.parse - function\n   *  ------------------------------------------------------------------------\n   *  Creates a date given its string representation.\n   *  ```\n   *  dt = date.parse(dstr)\n   *  ```\n   *  - `dstr` is a string rapresentation of the date to be created (e.g. `'2021-02-27T10:30:45.327'`)\n   *  - `dt` is the number of milliseconds from the epoch (Jan 1, 1970)\n   */\n  parse: function parse(str) {\n    return Number(Date.parse(str));\n  },\n\n  /**\n   *  date.stringify - function\n   *  ------------------------------------------------------------------------\n   *  Given a date in ms, it returns its ISO string representation\n   *  ```\n   *  dstr = date.stringify(dt)\n   *  ```\n   */\n  stringify: function stringify(date) {\n    return D(date).toISOString();\n  },\n\n  /**\n   *  date.now - function\n   *  ------------------------------------------------------------------------\n   *  It returns the current date in ms from the epoch.\n   *  ```\n   *  dt = date.now()\n   *  ```\n   */\n  now: function now() {\n    return Date.now();\n  },\n\n  /**\n   *  date.year - function\n   *  ------------------------------------------------------------------------\n   *  It returns the year of a given date, in the loacal timezone.\n   *  ```\n   *  y = date.year(dt)\n   *  ```\n   */\n  year: function year(date) {\n    return D(date).getFullYear();\n  },\n\n  /**\n   *  date.month - function\n   *  ------------------------------------------------------------------------\n   *  It returns the month of a given date, in the loacal timezone. January is 1,\n   *  Febrary is 2, etc.\n   *  ```\n   *  m = date.month(dt)\n   *  ```\n   */\n  month: function month(date) {\n    return D(date).getMonth() + 1;\n  },\n  // Return the year week number of a give date\n  week: function week(date) {\n    date = new Date(Number(date));\n    date.setHours(0, 0, 0, 0); // Thursday in current week decides the year.\n\n    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); // January 4 is always in week 1.\n\n    var week1 = new Date(date.getFullYear(), 0, 4); // Adjust to Thursday in week 1 and count number of weeks from date to week1.\n\n    return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\n  },\n\n  /**\n   *  date.weekDay - function\n   *  ------------------------------------------------------------------------\n   *  It returns the day of the week of a given date, in the loacal timezone.\n   *  Sunday is 0, monday is 1, tuesday is 2, etc.\n   *  ```\n   *  wd = date.weekDay(dt)\n   *  ```\n   */\n  weekDay: function weekDay(date) {\n    return D(date).getDay();\n  },\n\n  /**\n   *  date.day - function\n   *  ------------------------------------------------------------------------\n   *  It returns the month day of a given date, in the loacal timezone.\n   *  ```\n   *  d = date.day(dt)\n   *  ```\n   */\n  day: function day(date) {\n    return D(date).getDate();\n  },\n\n  /**\n   *  date.hours - function\n   *  ------------------------------------------------------------------------\n   *  It returns the hour a given date, in the loacal timezone.\n   *  ```\n   *  h = date.day(dt)\n   *  ```\n   */\n  hours: function hours(date) {\n    return D(date).getHours();\n  },\n\n  /**\n   *  date.minutes - function\n   *  ------------------------------------------------------------------------\n   *  It returns the minutes of a given date, in the loacal timezone.\n   *  ```\n   *  min = date.minutes(dt)\n   *  ```\n   */\n  minutes: function minutes(date) {\n    return D(date).getMinutes();\n  },\n\n  /**\n   *  date.seconds - function\n   *  ------------------------------------------------------------------------\n   *  It returns the seconds of a given date, in the loacal timezone.\n   *  ```\n   *  s = date.seconds(dt)\n   *  ```\n   */\n  seconds: function seconds(date) {\n    return D(date).getSeconds();\n  },\n\n  /**\n   *  date.milliseconds - function\n   *  ------------------------------------------------------------------------\n   *  It returns the milliseconds of a given date, in the loacal timezone.\n   *  ```\n   *  ms = date.milliseconds(dt)\n   *  ```\n   */\n  milliseconds: function milliseconds(date) {\n    return D(date).getMilliseconds();\n  },\n  UTC: {\n    /**\n     *  date.UTC.\\_\\_apply\\_\\_ - function\n     *  ------------------------------------------------------------------------\n     *  Creates a date given all the date components expressed in the UTC-0\n     *  timezone.\n     *  ```\n     *  dt = date.UTC(y, m, d, h, min, s, ms)\n     *  ```\n     *  - `y` is the year in the local timezone\n     *  - `m` is the month in the local timezone (1:January, ..., 12:December)\n     *  - `d` is the day in the local timezone\n     *  - `h` is the hour in the local timezone\n     *  - `min` is the minute in the local timezone\n     *  - `s` is the number of seconds\n     *  - `ms` is the number of milliseconds\n     *  - `dt` is the number of milliseconds from the epoch (Jan 1, 1970)\n     */\n    __apply__: function __apply__(y) {\n      var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var d = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var min = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var ms = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      return Date.UTC(y, m - 1, d, h, min, s, ms);\n    },\n\n    /**\n     *  date.UTC.year - function\n     *  ------------------------------------------------------------------------\n     *  It returns the year of a given date, in the UTC-0 timezone.\n     *  ```\n     *  y = date.UTC.year(dt)\n     *  ```\n     */\n    year: function year(date) {\n      return D(date).getUTCFullYear();\n    },\n\n    /**\n     *  date.UTC.month - function\n     *  ------------------------------------------------------------------------\n     *  It returns the month of a given date, in the UTC-0 timezone. January is 1,\n     *  Febrary is 2, etc.\n     *  ```\n     *  m = date.UTC.month(dt)\n     *  ```\n     */\n    month: function month(date) {\n      return D(date).getUTCMonth() + 1;\n    },\n\n    /**\n     *  date.UTC.weekDay - function\n     *  ------------------------------------------------------------------------\n     *  It returns the day of the week of a given date, in the UTC-0 timezone.\n     *  Sunday is 0, monday is 1, tuesday is 2, etc.\n     *  ```\n     *  wd = date.UTC.weekDay(dt)\n     *  ```\n     */\n    weekDay: function weekDay(date) {\n      return D(date).getUTCDay();\n    },\n\n    /**\n     *  date.UTC.day - function\n     *  ------------------------------------------------------------------------\n     *  It returns the month day of a given date, in the UTC-0 timezone.\n     *  ```\n     *  d = date.day(dt)\n     *  ```\n     */\n    day: function day(date) {\n      return D(date).getUTCDate();\n    },\n\n    /**\n     *  date.UTC.hours - function\n     *  ------------------------------------------------------------------------\n     *  It returns the hour a given date, in the UTC-0 timezone.\n     *  ```\n     *  h = date.UTC.day(dt)\n     *  ```\n     */\n    hours: function hours(date) {\n      return D(date).getUTCHours();\n    },\n\n    /**\n     *  date.UTC.minutes - function\n     *  ------------------------------------------------------------------------\n     *  It returns the minutes of a given date, in the UTC-0 timezone.\n     *  ```\n     *  min = date.UTC.minutes(dt)\n     *  ```\n     */\n    minutes: function minutes(date) {\n      return D(date).getUTCMinutes();\n    },\n\n    /**\n     *  date.UTC.seconds - function\n     *  ------------------------------------------------------------------------\n     *  It returns the seconds of a given date, in the UTC-0 timezone.\n     *  ```\n     *  s = date.UTC.seconds(dt)\n     *  ```\n     */\n    seconds: function seconds(date) {\n      return D(date).getUTCSeconds();\n    },\n\n    /**\n     *  date.UTC.milliseconds - function\n     *  ------------------------------------------------------------------------\n     *  It returns the milliseconds of a given date, in the UTC-0 timezone.\n     *  ```\n     *  ms = date.UTC.milliseconds(dt)\n     *  ```\n     */\n    milliseconds: function milliseconds(date) {\n      return D(date).getUTCMilliseconds();\n    }\n  }\n};\n\nvar D = function D(date) {\n  return new Date(date);\n};\n\n//# sourceURL=webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/date.js?");

/***/ })

}]);