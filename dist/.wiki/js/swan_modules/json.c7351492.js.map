{"version":3,"sources":["webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/json.js"],"names":["module","exports","types","json","undefined_text","Undefined","undefined_namespace","isString","x","wrap","Text","parse","str","JSON","unwrap","serialize","items","term","Tuple","imapSync","item","typeName","stringify"],"mappings":"oGAOAA,EAAOC,QAAUC,IACb,MAAMC,EAAO,GAEPC,EAAiB,IAAIF,EAAMG,UAAU,QACrCC,EAAsB,IAAIJ,EAAMG,UAAU,aAE1CE,EAAWC,GAAKN,EAAMO,KAAKD,aAAcN,EAAMQ,KAqCrD,OA5BAP,EAAKQ,MAAQC,GAAOL,EAASK,GAAOC,KAAKF,MAAMT,EAAMY,OAAOF,IAAQN,EASpEH,EAAKY,UAAY,IAAIC,KACjB,MAAMC,EAAO,IAAIf,EAAMgB,SAASF,GAEhC,OAAOC,EAAKE,SAASC,IACjB,OAAQA,EAAKC,UAET,IAAK,OACL,IAAK,OACL,IAAK,OACL,IAAK,OACL,IAAK,YACD,OAAOR,KAAKS,UAAUpB,EAAMY,OAAOM,GAAO,KAAM,GAEpD,QACI,OAAOhB,MAKhBD","file":".wiki/js/swan_modules/json.c7351492.js","sourcesContent":["/**\n *  json module\n *  ============================================================================\n *  \n *  This module contains functions for parsing and serializing JSON data.\n */\n \nmodule.exports = types => {\n    const json = {};\n    \n    const undefined_text = new types.Undefined(\"Text\");\n    const undefined_namespace = new types.Undefined(\"Namespace\");\n\n    const isString = x => types.wrap(x) instanceof types.Text;\n    const isNamespace = x => types.wrap(x) instanceof types.Namespace;\n\n    \n    /**\n     *  json.parse: Text t -> Namespace ns\n     *  ------------------------------------------------------------------------\n     *  Converts a JSON string to a namespace. \n     */\n    json.parse = str => isString(str) ? JSON.parse(types.unwrap(str)) : undefined_namespace;\n\n\n    /**\n     *  json.parse: Term t -> Text s\n     *  ------------------------------------------------------------------------\n     *  Converts a term to a JSON string. It returns `Undefined(Text)` if `t` is\n     *  a `Func` or an `Undefined` item.\n     */\n    json.serialize = (...items) => {\n        const term = new types.Tuple(...items);\n        \n        return term.imapSync(item => {            \n            switch (item.typeName) {\n                \n                case 'Bool':\n                case 'Numb':\n                case 'Text':\n                case 'List':\n                case 'Namespace':\n                    return JSON.stringify(types.unwrap(item), null, 2);\n                    \n                default:\n                    return undefined_text;\n            }\n        });\n    }\n\n    return json;\n}"],"sourceRoot":""}