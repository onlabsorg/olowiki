{"version":3,"sources":["webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/math.js"],"names":["module","exports","types","math","isNumb","x","wrap","Numb","INFINITY","Infinity","PI","Math","E","cos","NaN","sin","tan","acos","asin","atan","cosh","sinh","tanh","acosh","asinh","atanh","ceil","floor","trunc","round","abs","exp","log","log10","max","min","random","sqrt"],"mappings":"oGAYAA,EAAOC,QAAUC,IACb,MAAMC,EAAO,GAEPC,EAASC,GAAKH,EAAMI,KAAKD,aAAcH,EAAMK,KAwJnD,OA3IAJ,EAAKK,SAAWC,IAChBN,EAAKO,GAAKC,KAAKD,GACfP,EAAKS,EAAID,KAAKC,EAiBdT,EAAKU,IAAOR,GAAKD,EAAOC,GAAKM,KAAKE,IAAIR,GAAMS,IAC5CX,EAAKY,IAAOV,GAAKD,EAAOC,GAAKM,KAAKI,IAAIV,GAAMS,IAC5CX,EAAKa,IAAOX,GAAKD,EAAOC,GAAKM,KAAKK,IAAIX,GAAMS,IAC5CX,EAAKc,KAAOZ,GAAKD,EAAOC,GAAKM,KAAKM,KAAKZ,GAAKS,IAC5CX,EAAKe,KAAOb,GAAKD,EAAOC,GAAKM,KAAKO,KAAKb,GAAKS,IAC5CX,EAAKgB,KAAOd,GAAKD,EAAOC,GAAKM,KAAKQ,KAAKd,GAAKS,IAiB5CX,EAAKiB,KAAQf,GAAKD,EAAOC,GAAKM,KAAKS,KAAKf,GAAMS,IAC9CX,EAAKkB,KAAQhB,GAAKD,EAAOC,GAAKM,KAAKU,KAAKhB,GAAMS,IAC9CX,EAAKmB,KAAQjB,GAAKD,EAAOC,GAAKM,KAAKW,KAAKjB,GAAMS,IAC9CX,EAAKoB,MAAQlB,GAAKD,EAAOC,GAAKM,KAAKY,MAAMlB,GAAKS,IAC9CX,EAAKqB,MAAQnB,GAAKD,EAAOC,GAAKM,KAAKa,MAAMnB,GAAKS,IAC9CX,EAAKsB,MAAQpB,GAAKD,EAAOC,GAAKM,KAAKc,MAAMpB,GAAKS,IAe9CX,EAAKuB,KAAQrB,GAAKD,EAAOC,GAAKM,KAAKe,KAAKrB,GAAMS,IAC9CX,EAAKwB,MAAQtB,GAAKD,EAAOC,GAAKM,KAAKgB,MAAMtB,GAAKS,IAC9CX,EAAKyB,MAAQvB,GAAKD,EAAOC,GAAKM,KAAKiB,MAAMvB,GAAKS,IAC9CX,EAAK0B,MAAQxB,GAAKD,EAAOC,GAAKM,KAAKkB,MAAMxB,GAAKS,IAS9CX,EAAK2B,IAAMzB,GAAKD,EAAOC,GAAKM,KAAKmB,IAAIzB,GAAKS,IAS1CX,EAAK4B,IAAM1B,GAAKD,EAAOC,GAAKM,KAAKoB,IAAI1B,GAAKS,IAS1CX,EAAK6B,IAAM3B,GAAKD,EAAOC,GAAKM,KAAKqB,IAAI3B,GAAKS,IAS1CX,EAAK8B,MAAQ5B,GAAKD,EAAOC,GAAKM,KAAKsB,MAAM5B,GAAKS,IAS9CX,EAAK+B,IAAMvB,KAAKuB,IAShB/B,EAAKgC,IAAMxB,KAAKwB,IAShBhC,EAAKiC,OAAS/B,GAAKD,EAAOC,GAAKM,KAAKyB,SAAS/B,EAAIS,IASjDX,EAAKkC,KAAOhC,GAAKD,EAAOC,GAAKM,KAAK0B,KAAKhC,GAAKS,IAGrCX","file":".wiki/js/swan_modules/math.4c7f068e.js","sourcesContent":["/**\n *  math module\n *  ============================================================================\n *  \n *  This module contains mathematical functions and constants.\n *  \n *  Unless specified otherwise, all the functions of this library assume that\n *  their parameter is an item (1-d tuple). If more that one item is passed\n *  to a function, only the first item will be used and the others will be\n *  ignored.\n */\n\nmodule.exports = types => {\n    const math = {};\n    \n    const isNumb = x => types.wrap(x) instanceof types.Numb;\n    const isText = x => types.wrap(x) instanceof types.Text;\n\n\n    /**\n     *  Math constants\n     *  ------------------------------------------------------------------------\n     *  The following constants are defined:\n     *  \n     *  - `math.INFINITY`: Infinity.\n     *  - `math.PI`: Ratio of the a circle's circumference to its diameter, approximately 3.14159.\n     *  - `math.E`: Euler's constant and the base of natural logarithms, approximately 2.718.\n     */\n    math.INFINITY = Infinity;\n    math.PI = Math.PI;\n    math.E = Math.E;\n\n\n    /**\n     *  Trigonometric functions\n     *  ------------------------------------------------------------------------\n     *  The Numb namespace contains the following trigonometric functions: \n     *  \n     *  - `math.cos`:  Returns the cosine of a number.\n     *  - `math.sin`:  Returns the sine of a number.\n     *  - `math.tan`:  Returns the tangent of a number.\n     *  - `math.acos`: Returns the arccosine of a number.\n     *  - `math.asin`: Returns the arcsine of a number.\n     *  - `math.atan`: Returns the arctangent of a number.\n     *  \n     *  If the argument is not a number, these functions return `Undefined('Number')`.\n     */\n    math.cos  = x => isNumb(x) ? Math.cos(x)  : NaN;\n    math.sin  = x => isNumb(x) ? Math.sin(x)  : NaN;\n    math.tan  = x => isNumb(x) ? Math.tan(x)  : NaN;\n    math.acos = x => isNumb(x) ? Math.acos(x) : NaN;\n    math.asin = x => isNumb(x) ? Math.asin(x) : NaN;\n    math.atan = x => isNumb(x) ? Math.atan(x) : NaN;\n\n    \n    /**\n     *  Hyperbolic functions\n     *  ------------------------------------------------------------------------\n     *  The Numb namespace contains the following hyperbolic functions: \n     *  \n     *  - `math.cosh`:  Returns the hyperbolic cosine of a number.\n     *  - `math.sinh`:  Returns the hyperbolic sine of a number.\n     *  - `math.tanh`:  Returns the hyperbolic tangent of a number.\n     *  - `math.acosh`: Returns the hyperbolic arccosine of a number.\n     *  - `math.asinh`: Returns the hyperbolic arcsine of a number.\n     *  - `math.atanh`: Returns the hyperbolic arctangent of a number.\n     *  \n     *  If the argument is not a number, these functions return `Undefined('Number')`.\n     */\n    math.cosh  = x => isNumb(x) ? Math.cosh(x)  : NaN;\n    math.sinh  = x => isNumb(x) ? Math.sinh(x)  : NaN;\n    math.tanh  = x => isNumb(x) ? Math.tanh(x)  : NaN;\n    math.acosh = x => isNumb(x) ? Math.acosh(x) : NaN;\n    math.asinh = x => isNumb(x) ? Math.asinh(x) : NaN;\n    math.atanh = x => isNumb(x) ? Math.atanh(x) : NaN;\n    \n    \n    /**\n     *  Rounding\n     *  ------------------------------------------------------------------------\n     *  The following functions perform number rounding. \n     *  \n     *  - `math.ceil`: Returns the smallest integer greater than or equal to a number.\n     *  - `math.floor`: Returns the largest integer less than or equal to a number.\n     *  - `math.trunc`: Returns the integer part of the number x, removing any fractional digits.\n     *  - `math.round`: Returns the value of a number rounded to the nearest integer.\n     *  \n     *  If the argument is not a number, these functions return `Undefined('Number')`.\n     */\n    math.ceil  = x => isNumb(x) ? Math.ceil(x)  : NaN;\n    math.floor = x => isNumb(x) ? Math.floor(x) : NaN;\n    math.trunc = x => isNumb(x) ? Math.trunc(x) : NaN;\n    math.round = x => isNumb(x) ? Math.round(x) : NaN;\n    \n\n    /**\n     *  math.abs - function\n     *  ------------------------------------------------------------------------\n     *  Returns the absolute value of a number. \n     *  If the argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.abs = x => isNumb(x) ? Math.abs(x) : NaN;\n\n\n    /**\n     *  math.exp - function\n     *  ------------------------------------------------------------------------\n     *  Returns E^x, where x is the argument, and E is Euler's constant. \n     *  If the argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.exp = x => isNumb(x) ? Math.exp(x) : NaN;\n    \n    \n    /**\n     *  math.log - function\n     *  ------------------------------------------------------------------------\n     *  Returns the natural logarithm of a number. \n     *  If the argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.log = x => isNumb(x) ? Math.log(x) : NaN;\n    \n    \n    /**\n     *  math.log10 - function\n     *  ------------------------------------------------------------------------\n     *  Returns the base 10 logarithm of a number. \n     *  If the argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.log10 = x => isNumb(x) ? Math.log10(x) : NaN;\n    \n    \n    /**\n     *  math.max - function\n     *  ------------------------------------------------------------------------\n     *  Returns the largest of zero or more numbers.\n     *  If any argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.max = Math.max;\n\n\n    /**\n     *  math.min - function\n     *  ------------------------------------------------------------------------\n     *  Returns the smallest of zero or more numbers.\n     *  If any argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.min = Math.min;\n    \n\n    /**\n     *  math.random - function\n     *  ------------------------------------------------------------------------\n     *  Returns a pseudo-random number between 0 and the given argument.\n     *  If the argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.random = x => isNumb(x) ? Math.random()*x : NaN;\n\n\n    /**\n     *  math.sqrt - function\n     *  ------------------------------------------------------------------------\n     *  Returns the positive square root of a number.\n     *  If any argument is not a number, this functions return `Undefined('Number')`.\n     */\n    math.sqrt = x => isNumb(x) ? Math.sqrt(x) : NaN;\n    \n    \n    return math;  \n}\n"],"sourceRoot":""}