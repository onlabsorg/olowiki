{"version":3,"sources":["webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/dict.js"],"names":["DATA","Symbol","module","exports","types","pairs","map","Map","size","keys","Tuple","values","entries","get","key","has","Undefined","dict","wrap","Namespace"],"mappings":"sGASA,MAAMA,EAAOC,OAAO,uBAEpBC,EAAOC,QAAUC,IAAS,CA2BtB,UAAWC,GAEP,MAAMC,EAAM,IAAIC,IAAIF,GAEpB,MAAO,CAEH,CAACL,GAAQM,EAETE,KAASF,EAAIE,KACbC,KAAS,IAAIL,EAAMM,SAASJ,EAAIG,QAChCE,OAAS,IAAIP,EAAMM,SAASJ,EAAIK,UAChCC,QAAS,IAAIR,EAAMM,SAASJ,EAAIM,WAEhCC,IAAKC,GAAOR,EAAIS,IAAID,GAAOR,EAAIO,IAAIC,GAAO,IAAIV,EAAMY,UAAU,UAAWF,GACzEC,IAAKD,GAAOR,EAAIS,IAAID,KAW5B,OAAQG,GACJ,OAAIb,EAAMc,KAAKD,aAAiBb,EAAMe,WAC3BF,EAAKjB,aAAiBO","file":".wiki/js/swan_modules/dict.3dbe08ba.js","sourcesContent":["/**\n *  dict module\n *  ============================================================================\n *  \n *  The `dict` module exports functions to create and detect Namespace item that \n *  behaves like a dictionary. \n */\n\n\nconst DATA = Symbol(\"Swan Dictionary Map\");\n\nmodule.exports = types => ({\n\n   /**\n    *  `dict.create: List Tuple kv -> Namespace d`\n    *  ----------------------------------------------------------------------------\n    *   This function takes a tuple of `[key,value]` pairs as input and returns\n    *   a dictionary namespace.\n    *  \n    *  ```\n    *  d = dict(['key1','val1'], [22, 'val2'], ['key3', 30])\n    *  ```\n    *  \n    *  The returned dictionary Namespace `d` contains the following items:\n    *  \n    *  - `d.size` is a `Numb` item that contains the number of items in the dictionary\n    *    (3 in the example above)\n    *  - `d.keys` is the Tuple of keys of the dictionaty (`('key1',22,'key2')` in \n    *    the example above)\n    *  - `d.values` is the Tuple of values of the dictionaty (`('val1',val2,30)` in \n    *    the example above)\n    *  - `d.entries` is the Tuple of `[key,value]` pairs of the dictionaty (\n    *    `(['key1','val1'], [22, 'val2'], ['key3', 30])` in the example above)\n    *  - `d.get` is a Func that takes a key as argument and returns the \n    *    corresponding value, or `Undefined('Mapping')` if the key doesn't exist.\n    *  - `d.has` is a Func that takes a key as argument and returns `TRUE` if\n    *    the dictionary contains that key, otherwise it returns `FALSE`.\n    */\n    create (...pairs) {\n        \n        const map = new Map(pairs);\n        \n        return {\n            \n            [DATA] : map,\n            \n            size   : map.size,\n            keys   : new types.Tuple(...map.keys()),\n            values : new types.Tuple(...map.values()),\n            entries: new types.Tuple(...map.entries()),\n            \n            get: key => map.has(key) ? map.get(key) : new types.Undefined('Mapping', key),\n            has: key => map.has(key),\n        }\n    },\n    \n    \n    /**\n     *  `dict.isDIct: Namespace d -> Bool b`\n     *  ----------------------------------------------------------------------------\n     *  This function returns `TRUE` if the passed item is a dictionary\n     *  namespace.\n     */\n    isDict (dict) {\n        if (types.wrap(dict) instanceof types.Namespace) {\n            return dict[DATA] instanceof Map;\n        } else {\n            return false;\n        }\n    }\n});\n"],"sourceRoot":""}