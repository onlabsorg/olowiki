{"version":3,"sources":["webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/list.js"],"names":["ensureList","list","Array","isArray","Error","ensureString","string","ensureNumber","number","Number","isNaN","exports","find","item","indexOf","rfind","lastIndexOf","join","separator","reverse","rlist","i","length","push","slice","startIndex","endIndex","undefined"],"mappings":"sGA6FA,SAASA,EAAYC,GACjB,IAAKC,MAAMC,QAAQF,GAAO,MAAM,IAAIG,MAAM,sBAG9C,SAASC,EAAcC,GACnB,GAAsB,kBAAXA,EAAqB,MAAM,IAAIF,MAAM,wBAGpD,SAASG,EAAcC,GACnB,GAAIC,OAAOC,MAAMF,GAAS,MAAM,IAAIJ,MAAM,wBAtF9CO,EAAQC,KAAO,SAAUX,EAAMY,GAE3B,OADAb,EAAWC,GACJA,EAAKa,QAAQD,IAaxBF,EAAQI,MAAQ,SAAUd,EAAMY,GAE5B,OADAb,EAAWC,GACJA,EAAKe,YAAYH,IAa5BF,EAAQM,KAAO,SAAUhB,EAAMiB,EAAU,IACrClB,EAAWC,GACX,IAAK,IAAIY,KAAQZ,EAAMI,EAAaQ,GAEpC,OADAR,EAAaa,GACNjB,EAAKgB,KAAKC,IAarBP,EAAQQ,QAAU,SAAUlB,GACxBD,EAAWC,GACX,MAAMmB,EAAQ,GACd,IAAK,IAAIC,EAAEpB,EAAKqB,OAAO,EAAGD,GAAG,EAAGA,IAC5BD,EAAMG,KAAKtB,EAAKoB,IAEpB,OAAOD,GAeXT,EAAQa,MAAQ,SAAUvB,EAAMwB,EAAYC,GAIxC,OAHA1B,EAAWC,GACXM,EAAakB,QACIE,IAAbD,GAAwBnB,EAAamB,GAClCzB,EAAKuB,MAAMC,EAAYC","file":"js/swan_modules/list.894aaa54.js","sourcesContent":["/**\n *  list - swan stdlib module\n *  ============================================================================\n *  This modules contains functions to manipulate swan lists.\n */\n\n\n/**\n *  list.find - function\n *  ----------------------------------------------------------------------------\n *  Returns the index of the fists occurrence of an item inside a list. It\n *  returns -1 if the given item is not contained in the list.\n *  ```\n *  index = list.find(lst, item)\n *  ```\n */\nexports.find = function (list, item) {\n    ensureList(list);\n    return list.indexOf(item);\n}\n\n\n/**\n *  list.rfind - function\n *  ----------------------------------------------------------------------------\n *  Returns the index of the last occurrence of an item inside a list. It\n *  returns -1 if the given item is not contained in the list.\n *  ```\n *  index = list.rfind(lst, item)\n *  ```\n */\nexports.rfind = function (list, item) {\n    ensureList(list);\n    return list.lastIndexOf(item);\n}\n\n\n/**\n *  list.join - function\n *  ----------------------------------------------------------------------------\n *  Given a list of strings, returns the string obtained by concatenating\n *  all the item, optionally with an interposed separator.\n *  ```\n *  str = list.join(strList, separator)\n *  ```\n */\nexports.join = function (list, separator=\"\") {\n    ensureList(list);\n    for (let item of list) ensureString(item);\n    ensureString(separator);\n    return list.join(separator);\n}\n\n\n/**\n *  list.reverse - function\n *  ----------------------------------------------------------------------------\n *  Returns a list containing all the item of a given list, but in reversed\n *  oredr.\n *  ```\n *  rList = list.reverse(lst)\n *  ```\n */\nexports.reverse = function (list) {\n    ensureList(list);\n    const rlist = [];\n    for (let i=list.length-1; i>=0; i--) {\n        rlist.push(list[i]);\n    }\n    return rlist;\n}\n\n\n/**\n *  list.slice - function\n *  ----------------------------------------------------------------------------\n *  Returns the portion of a given list, between a startIndex (included) and\n *  an endIndex (not included). Negative indexes are computed from the end\n *  of the list.\n *  ```\n *  subList = list.slice(lst, startIndex, endIndex)\n *  ```\n *  If `endIndex` is omitted, it slices up to the end of `lst`.\n */\nexports.slice = function (list, startIndex, endIndex) {\n    ensureList(list);\n    ensureNumber(startIndex);\n    if (endIndex !== undefined) ensureNumber(endIndex);\n    return list.slice(startIndex, endIndex);\n}\n\n\n\nfunction ensureList (list) {\n    if (!Array.isArray(list)) throw new Error(\"List type expected\");\n}\n\nfunction ensureString (string) {\n    if (typeof string !== \"string\") throw new Error(\"String type expected\");\n}\n\nfunction ensureNumber (number) {\n    if (Number.isNaN(number)) throw new Error(\"Number type expected\");\n}\n"],"sourceRoot":""}