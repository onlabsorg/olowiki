{"version":3,"sources":["webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/debug.js"],"names":["module","exports","types","debug","logCount","log","values","term","Tuple","normalize","console","inspect","info","type","typeName","value","unwrap","domain","map","index","vget","key","Array","from","items","item","operation","arguments","args","arg","position","row","col","getLocation","source","split"],"mappings":"uGAQAA,EAAOC,QAAUC,IACb,MAAMC,EAAQ,GAQd,IAAIC,EAAW,EAgEf,OA/DAD,EAAME,IAAM,IAAIC,KACZ,MAAMC,EAAO,IAAIL,EAAMM,SAASF,GAAQG,YAIxC,OAFAL,IACAM,QAAQL,IAAI,OAAOD,KAAaG,GACzB,SAASH,OASpBD,EAAMQ,QAAU,IAAIL,KAChB,MAAMC,EAAO,IAAIL,EAAMM,SAASF,GAAQG,YAElCG,EAAO,CACTC,KAAMN,EAAKO,UAKf,OAAQF,EAAKC,MAET,IAAK,OACL,IAAK,OACL,IAAK,OACDD,EAAKG,MAAQb,EAAMc,OAAOT,GAC1B,MAEJ,IAAK,OACDK,EAAKG,MAAQR,EAAKU,OAAOC,IAAIC,GAAShB,EAAMQ,QAAQJ,EAAKa,KAAKD,KAC9D,MAEJ,IAAK,YACDP,EAAKG,MAAQ,GACb,IAAK,IAAIM,KAAOd,EAAKU,OACjBL,EAAKG,MAAMM,GAAOlB,EAAMQ,QAAQJ,EAAKa,KAAKC,IAE9C,MAEJ,IAAK,OACD,MAEJ,IAAK,QACDT,EAAKG,MAAQO,MAAMC,KAAKhB,EAAKiB,SAASN,IAAIO,GAAQtB,EAAMQ,QAAQc,IAChE,MAEJ,IAAK,YAGD,GAFAb,EAAKc,UAAYnB,EAAKM,KACtBD,EAAKe,UAAYpB,EAAKqB,KAAKV,IAAIW,GAAO1B,EAAMQ,QAAQkB,IAChDtB,EAAKuB,SAAU,CACf,MAAOC,EAAKC,GAAOzB,EAAKuB,SAASG,cACjCrB,EAAKsB,OAAS3B,EAAKuB,SAASI,OAAOC,MAAM,MAAMJ,EAAI,GACnDnB,EAAKkB,SAAWE,EAEpB,MAGR,OAAOpB,GAGJT","file":"js/swan_modules/debug.c3f98aa6.js","sourcesContent":["/**\n *  debug module\n *  ============================================================================\n *  The debug module provides functions for debugging swan code.\n */\n\n\n\nmodule.exports = types => {\n    const debug = {};\n    \n    \n    /**\n     *  debug.log: Term t -> Text id\n     *  ------------------------------------------------------------------------\n     *  The log function writes the passed item to the javascript console.\n     */\n    let logCount = 0;\n    debug.log = (...values) => {\n        const term = new types.Tuple(...values).normalize();\n        \n        logCount++;\n        console.log(`Log ${logCount}:`, term);\n        return `[[Log ${logCount}]]`;\n    }\n    \n    \n    /**\n     *  debug.inspect: Term t -> Namespace info\n     *  ------------------------------------------------------------------------\n     *  Returns an object containing detailed information about the passed term.\n     */\n    debug.inspect = (...values) => {\n        const term = new types.Tuple(...values).normalize();\n        \n        const info = {\n            type: term.typeName\n        }\n        \n        // return;\n\n        switch (info.type) {\n            \n            case \"Bool\":\n            case \"Numb\":\n            case \"Text\":\n                info.value = types.unwrap(term);\n                break;\n                \n            case \"List\":\n                info.value = term.domain.map(index => debug.inspect(term.vget(index)));\n                break;\n                \n            case \"Namespace\":\n                info.value = {};\n                for (let key of term.domain) {\n                    info.value[key] = debug.inspect(term.vget(key))\n                }\n                break;\n                \n            case \"Func\":\n                break;\n                \n            case \"Tuple\":\n                info.value = Array.from(term.items()).map(item => debug.inspect(item));\n                break;\n                \n            case \"Undefined\":\n                info.operation = term.type;\n                info.arguments = term.args.map(arg => debug.inspect(arg));\n                if (term.position) {\n                    const [row, col] = term.position.getLocation();\n                    info.source = term.position.source.split('\\n')[row-1];\n                    info.position = col;\n                }\n                break;\n        }\n        \n        return info;\n    }\n    \n    return debug;\n}\n\n"],"sourceRoot":""}