{"version":3,"sources":["webpack:///./node_modules/@onlabsorg/swan-js/lib/modules/debug.js"],"names":["logCount","exports","log","async","items","context","this","value","$Tuple","normalize","console","inspect","type","data","Array","from","mapAsync","item","call","Error","args","arg","Promise","all","map","mapObject","obj","newObj","key"],"mappings":"uGAYA,IAAIA,EAAW,EACfC,EAAQC,IAAMC,kBAAmBC,GAC7B,MAAMC,EAAUC,KACVC,EAAQF,EAAQG,UAAUJ,GAAOK,YAIvC,OAFAT,IACAU,QAAQR,IAAI,OAAOF,KAAaO,GACzB,SAASP,OAWpB,MAAMW,EAAUV,EAAQU,QAAUR,kBAAmBC,GACjD,MAAMC,EAAUC,KAEVC,EAAQF,EAAQG,UAAUJ,GAAOK,YAEvC,GAAIF,aAAiBF,EAAQG,OAAQ,MAAO,CACxCI,KAAM,QACNC,KAAMC,MAAMC,WAAWR,EAAMS,SAASC,GAAQN,EAAQO,KAAKb,EAASY,MAGxE,GAAIV,aAAiBY,MAAO,MAAO,CAC/BP,KAAM,QACNC,KAAMN,GAGV,MAAMK,QAAaP,EAAQO,KAAKL,GAEhC,OAAQK,GAEJ,IAAK,YACD,MAAO,CACHA,KAAMA,EACNC,KAAMC,MAAMC,WAAWR,EAAMa,KAAKJ,SAASK,GAAOV,EAAQO,KAAKb,EAASgB,MAGhF,IAAK,OACD,MAAO,CAACT,OAAMC,WAAYS,QAAQC,IAAIhB,EAAMiB,IAAIP,GAAQN,EAAQO,KAAKb,EAASY,MAElF,IAAK,YACD,MAAO,CAACL,OAAMC,WAAYY,EAAUlB,EAAOU,GAAQN,EAAQO,KAAKb,EAASY,KAE7E,QACI,MAAO,CAACL,OAAMC,KAAMN,KAIhCJ,eAAesB,EAAWC,EAAKF,GAC3B,MAAMG,EAAS,GACf,IAAK,IAAIC,KAAOF,EACZC,EAAOC,SAAaJ,EAAIE,EAAIE,IAEhC,OAAOD","file":"js/swan_modules/debug.4325bdff.js","sourcesContent":["/**\n *  debug - swan stdlib module\n *  ============================================================================\n *  The debug module provides functions for debugging swan code.\n */\n\n\n/**\n *  debug.log - function\n *  ----------------------------------------------------------------------------\n *  The log function writes the passed item to the javascript console.\n */\nvar logCount = 0;\nexports.log = async function (...items) {\n    const context = this;\n    const value = context.$Tuple(...items).normalize();\n    \n    logCount++;\n    console.log(`Log ${logCount}:`, value);\n    return `[[Log ${logCount}]]`;\n}\n\n\n\n/**\n *  debug.inspect - function\n *  ----------------------------------------------------------------------------\n *  The inspect function returns a `descriptor` namespace containing detailed\n *  information about the passed item.\n */\nconst inspect = exports.inspect = async function (...items) {\n    const context = this;\n    \n    const value = context.$Tuple(...items).normalize();\n    \n    if (value instanceof context.$Tuple) return {\n        type: \"Tuple\",\n        data: Array.from(await value.mapAsync(item => inspect.call(context, item)))\n    }\n    \n    if (value instanceof Error) return {\n        type: \"Error\",\n        data: value,\n    }\n\n    const type = await context.type(value);\n    \n    switch (type) {\n        \n        case \"Undefined\":\n            return {\n                type: type, \n                data: Array.from(await value.args.mapAsync(arg => inspect.call(context, arg)))\n            };\n            \n        case \"List\":\n            return {type, data: await Promise.all(value.map(item => inspect.call(context, item)))};\n            \n        case \"Namespace\":\n            return {type, data: await mapObject(value, item => inspect.call(context, item))};\n            \n        default:\n            return {type, data: value};\n    }\n}\n\nasync function mapObject (obj, map) {\n    const newObj = {};\n    for (let key in obj) {\n        newObj[key] = await map(obj[key]);\n    }\n    return newObj;\n}\n"],"sourceRoot":""}